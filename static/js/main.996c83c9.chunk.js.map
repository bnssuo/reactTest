{"version":3,"sources":["components/Charts.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","react_default","a","createElement","className","es","data","options","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","Boolean","window","hostname","match","Square","value","React","Board","i","src_Square","renderSquare","Game","src_Board","ReactDOM","render","src_Game","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"sNAGMA,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,UAAUT,EAAMS,WAHNR,wEAed,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,KAAMX,KAAKI,MAAMC,UACjBO,QAAS,CACLC,MAAM,CACFC,QAAQd,KAAKJ,MAAMmB,aACnBC,KAAK,qBAAqBhB,KAAKJ,MAAMqB,SACrCC,SAAS,IAEbC,OAAO,CACHL,QAAQd,KAAKJ,MAAMwB,cACnBC,SAASrB,KAAKJ,MAAM0B,mBAKhChB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,KAAMX,KAAKI,MAAMC,UACjBO,QAAS,CACLC,MAAM,CACFC,QAAQd,KAAKJ,MAAMmB,aACnBC,KAAK,qBAAqBhB,KAAKJ,MAAMqB,SACrCC,SAAS,IAEbC,OAAO,CACHL,QAAQd,KAAKJ,MAAMwB,cACnBC,SAASrB,KAAKJ,MAAM0B,mBAKhChB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,KAAMX,KAAKI,MAAMC,UACjBO,QAAS,CACLC,MAAM,CACFC,QAAQd,KAAKJ,MAAMmB,aACnBC,KAAK,qBAAqBhB,KAAKJ,MAAMqB,SACrCC,SAAS,IAEbC,OAAO,CACHL,QAAQd,KAAKJ,MAAMwB,cACnBC,SAASrB,KAAKJ,MAAM0B,2BA1D5BC,aAAd5B,EAQK6B,aAAe,CAClBT,cAAa,EACbK,eAAe,EACfE,eAAe,QACfL,SAAS,QAuDFtB,QCjEG4B,YCOEE,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,+DCNAC,mLAEE,OACIvB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACbT,KAAKJ,MAAMkC,cAJPC,IAAMR,WAUrBS,uLACWC,GACT,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAQJ,MAAOG,qCAMtB,OACI3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAJR,kBAKPH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVT,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,IAEvB7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVT,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,IAEvB7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVT,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,GAClBnC,KAAKmC,aAAa,YAxBnBJ,IAAMR,WA+BpBa,mLAEE,OACI9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC6B,EAAD,OAEJ/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,oBATDuB,IAAMR,WAkBzBe,IAASC,OACLjC,EAAAC,EAAAC,cAACgC,EAAD,MACAC,SAASC,eAAe,6BCzE5BC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.996c83c9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\nclass Chart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            chartData:props.chartData\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        displayTitle:true,\r\n        displayLegend: true,\r\n        legendPosition:'right',\r\n        location:'City'\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"chart\">\r\n                <Bar\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        title:{\r\n                            display:this.props.displayTitle,\r\n                            text:'Largest Cities In '+this.props.location,\r\n                            fontSize:25\r\n                        },\r\n                        legend:{\r\n                            display:this.props.displayLegend,\r\n                            position:this.props.legendPosition\r\n                        }\r\n                    }}\r\n                />\r\n\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        title:{\r\n                            display:this.props.displayTitle,\r\n                            text:'Largest Cities In '+this.props.location,\r\n                            fontSize:25\r\n                        },\r\n                        legend:{\r\n                            display:this.props.displayLegend,\r\n                            position:this.props.legendPosition\r\n                        }\r\n                    }}\r\n                />\r\n\r\n                <Pie\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        title:{\r\n                            display:this.props.displayTitle,\r\n                            text:'Largest Cities In '+this.props.location,\r\n                            fontSize:25\r\n                        },\r\n                        legend:{\r\n                            display:this.props.displayLegend,\r\n                            position:this.props.legendPosition\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './components/Charts';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            chartData:{}\n        }\n    }\n\n    componentWillMount(){\n        this.getChartData();\n    }\n\n    getChartData(){\n        // Ajax calls here\n        this.setState({\n            chartData:{\n                labels: ['Boston', 'Worcester', 'Springfield', 'Lowell', 'Cambridge', 'New Bedford'],\n                datasets:[\n                    {\n                        label:'Population',\n                        data:[\n                            617594,\n                            181045,\n                            153060,\n                            106519,\n                            105162,\n                            95072\n                        ],\n                        backgroundColor:[\n                            'rgba(255, 99, 132, 0.6)',\n                            'rgba(54, 162, 235, 0.6)',\n                            'rgba(255, 206, 86, 0.6)',\n                            'rgba(75, 192, 192, 0.6)',\n                            'rgba(153, 102, 255, 0.6)',\n                            'rgba(255, 159, 64, 0.6)',\n                            'rgba(255, 99, 132, 0.6)'\n                        ]\n                    }\n                ]\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h2>Welcome to React</h2>\n                </div>\n                <Chart chartData={this.state.chartData} location=\"Massachusetts\" legendPosition=\"bottom\"/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nclass Square extends React.Component {\n    render() {\n        return (\n            <button className=\"square\">\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return <Square value={i} />;\n    }\n\n    render() {\n        const status = 'Next player: X';\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}